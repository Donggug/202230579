# -*- coding: utf-8 -*-
"""python-final.ipynb의 사본

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hohQ2jo5iIBeku5QFqmCm1TOLHQXkat3

# **파이썬 자료구조 2023-1학기 기말고사**

기말 고사 유의 사항  

1. 문제의 답안을 함수로 작성하되, 반드시 함수 이름은 문제에서 제시하는 함수명으로 할것 (함수명이 다르면 점수 획득 불가능, 클래스 내 메소드 정의 불가, 반드시 함수로만 작성할 것)
1. 각 문제의 답안은 답안 작성 셀에서 작성할 것
1. 모든 문제는 함수의 매개변수 입력을 통해 데이터를 전달 받고, 결과를 반환하는 함수를 정의하는 것임 (주의: input()는 키보드 입력이며, 함수 입력이 아님, print()는 모니터에 출력하는 함수이며, 함수 반환이 아님)
1. 문제에서 요구하는 함수 외에 다른 함수를 정의하여 문제에서 요구하는 함수내에서 호출할수 있음
1. 함수의 입력과 반환 시 데이터 타입도 반드시 지킬것 (예: 문자열 반환이라는 문제에서는 반드시 문자열을 반환 해야함)
1. 답안 제출은 함수가 정의된 부분만 제출하고, 나머지 코드는 지우고 제출할 것, 답안 제출시 input() 함수나 , print() 함수가 있으면 안됨
1. 코드 작성이 끝난 파일은 개별적으로 함수를 호출해서 검수를 거쳐 정답이 맞는지 확인할 것
1. 작성된 답안은 colab 상단 메뉴의 파일--> 다운로드 --> .py 로 다운 받아 학교 LMS 에 제출할 것  ( .py 다운로드시 경고창이 뜨지만, 계속 버튼을 눌러 다운 할것)
1. .py 가 학교 LMS 에 올라가지 않을경우 ZIP으로 압축하여 업로드 가능
1. 파일의 이름은 자신의 학번.py      예) 학번이 2021111000 일 경우,     2021111000.py 파일을 제출
1. 코드는 자동 채점이 되며, 각 문제당 부분 점수는 없음
1. 시험지 문제 및 답안을 절대 유출 금지(SNS, 커뮤니티 및 개인 블로그 포함)
1. 제출 기한을 넘겨 답안을 제출하는 것은 불가

# 문제 1) - 10점

<strong> 팔굽혀 펴기 세계 대회가 개최되어, 많은 이들이 참가 했다. 대회의 상황을 실시간으로 알리기 위해 다음과 같은 자료구조를 사용하여 참가자들의 기록을 관리하고 있다.</strong>
이 자료구조에서는 팔굽혀 펴기 횟수가 많은 참가자부터 적은 참가자들을 순서대로 관리한다. 또한 새로운 참가자가 대회에 참여 했을 경우 팔굽혀 펴기 기록에 따라 적절한 위치를 찾아 데이터를 저장하게 된다.


```
[('John',200), ('Danial',100),('Charles',50)]
```

예를 들어,
George 라는 사람이 팔굽혀 펴기에 새롭게 등장하여, 150개의 기록을 했을경우, 
아래와 같이 내림차순으로 저장하게 된다.


<George 등장 후>

```
[('John',200),('George', 150), ('Danial',100),('Charles',50)]
```


<strong> 문제 - 위의 자료구조로 대회를 개최할 수 있도록, 새로운 참가자의 기록을 알맞은 위치에 저장하는 함수를 작성하시오. (단, 동점자가 없다고 가정)</strong>

<br>
함수의 첫번째 입력으로는 기존 자료구조 리스트, 두번째 입력으로는 참가자의 이름, 세번째 입력으로는 참가의 기록이 매개변수로 전달 됨


* 입력(기존 기록의 리스트, 참가자 이름, 참가자 기록)  <br>
* 반환(새로운 참가자의 기록을 저장한 리스트)

다음과 같이 함수를 호출하면, 올바른 결과가 반환되어야 함


case1)

* 함수 호출
```
exam1([('John',200), ('Danial',100),('Charles',50)],'George',150) 
```

* 결과 반환
```
[('John',200),('George', 150), ('Danial',100),('Charles',50)]
```

case2)

* 함수 호출
```
exam1([('John',200), ('Danial',100),('Charles',50)], 'Kim', 10) 
```

* 결과 반환
```
[('John',200),('Danial',100),('Charles',50),('Kim',10)]
```


* 함수 이름: exam1<br>      (반드시 함수 이름을 exam1로 작성할것!!)
"""

###### 1번 문제 답안 작성 셀

def exam1(tempA,tempB,tempC):
    for i in range(0 ,len(tempA)-1):
        a = tempA[i][1]

        if a < tempC:
            tempA.insert(i,(tempB,tempC))
            return tempA
    
    tempA.insert(len(tempA),(tempB,tempC))
    return tempA

exam1([('John',200), ('Danial',100),('Charles',50)],'ere',140)

"""## 문제 2) - 10점

<strong> 정수로 이루어진 하나의 리스트를 함수의 입력으로 넣으면, 선택정렬로 이 리스트를 오름차순으로 정렬하는 함수가 있다.  이 함수는 선택정렬 과정에서 몇번의 데이터 교환(swap)이 수행되었는지를 계산하여 반환하는 기능을 한다.</strong>

예를 들어 다음 데이터와 같은 경우, 선택 정렬을 할때, 총 2회의 데이터 교환(Swap)이 수행된다.

![1](https://github.com/ykkim77/python_practice_final/blob/main/images/1.jpg?raw=1)
![2](https://github.com/ykkim77/python_practice_final/blob/main/images/2.jpg?raw=1)
![3](https://github.com/ykkim77/python_practice_final/blob/main/images/3.jpg?raw=1)
![4](https://github.com/ykkim77/python_practice_final/blob/main/images/4.jpg?raw=1)



<strong> 문제 - 입력으로 들어간 리스트가 선택정렬 수행과정에서 몇번의 데이터 Swap이 수행되었는지를 반환하는 함수를 작성하시오. </strong>




* 입력(정수로 이루어진 리스트)  <br>
* 반환(선택정렬 과정에서 수행된 Swap의 횟수를 정수로 반환)

다음과 같이 함수를 호출하면, 올바른 결과가 반환되어야 함


case1)

* 함수 호출
```
exam2([20,12,10,15,2]) 
```

* 결과 반환
```
2
```

case2)

* 함수 호출
```
exam2([1,2,3]) 
```

* 결과 반환
```
0
```


* 함수 이름: exam2<br>      (반드시 함수 이름을 exam2로 작성할것!!)
"""

#### 2번 문제 답안 작성 셀

def exam2(a):
    count = 0

    for k in range(len(a), 0 ,-1):
        m = a[0]
        pos = 0

        for x in range(k):
            if m < a[x]:
                m = a[x]
                pos = x
        
        if pos != k-1:
            t = a[pos]
            a[pos] = a[k-1]
            a[k-1] = t
        
            count += 1
            
    return count

exam2([7,5,2,4,3])

"""## 문제 3) - 20점

<strong> 특정한 무게를 가진 보석들이 다음과 같이 4개의 종류가 있다. (금괴 6kg, 13억), (수정 4kg, 8억), (루비 3kg, 6억), (진주 5kg, 12억) </strong> <br>
<strong> 이 보석들은 가방의 최대 수용 무게에 따라 어떤 종류의 보석들을 가방에 넣을 수 있을지 결정된다 </strong>

![6](https://github.com/ykkim77/python_practice_final/blob/main/images/6.jpg?raw=1)


<strong> 문제 - 함수의 입력으로 가방의 최대 수용 무게를 넣으면, 가방에 넣을 수 있는 보석 금액의 최대 가치를 반환하는 함수를 작성하시오.</strong>
<br>예를 들면, 가방의 최대 수용 무게가 7kg 이었을때, 루비와 수정을 넣어 14억의 최대 가치를 얻을 수 있다.


case1)

* 함수 호출
```
exam3(7) 
```

* 결과 반환
```
14
```

case2)

* 함수 호출
```
exam3(9) 
```

* 결과 반환
```
20
```


* 함수 이름: exam3<br>      (반드시 함수 이름을 exam3로 작성할것!!)
"""

#### 3번 문제 답안 작성 셀

def exam3(a):
    b = [(6,13),(4,8),(3,6),(5,12)]
    
    kg = 0
    money=0
    
    if a >= 3:
        while a != kg:
            c = a-kg
        
            if c >= 8:
                kg += 5
                money += 12
            elif c == 3:
                kg += 3
                money += 6
            elif c == 4:
                kg += 4
                money += 8
            elif c == 5:
                kg += 5
                money += 12
            elif c == 6:
                kg += 6
                money += 13                
            elif c == 7:
                kg += 7
                money += 14   
    return money

exam3(14)

"""## 문제 4) - 20점

<strong> 다음은 붕어빵을 만드는 기계를 나타내고, 붕어빵 틀은 총 n개의 붕어빵을 구울수 있도록 되어 있다. 그곳에는 다 구어진 붕어빵이 들어 있다. </strong> <br>
<strong> 붕어빵을 꺼낼때, k 번째 붕어빵을 계속적으로 꺼내어, 가장 마지막에 남게되는 붕어빵이 무엇인지 구하려고 한다.  </strong>
<strong><br> 예를 들어 n이 6이고, k 가 2일때는 2번째, 4번째, 6번째, 3번째, 1번째 붕어빵을 순서로 꺼내게 되어 가장 마지막에 남는 붕어빵은 5번째 붕어빵이 된다.  (단 k < n) </strong>




![9](https://github.com/ykkim77/python_practice_final/blob/main/images/9.jpg?raw=1)


<strong> 문제 - 함수의 입력으로 n과 k 값을 차례로 넣게 되면, 마지막으로 남게 되는 붕어빵의 번호를 반환하는 함수를 작성하시오.</strong>
* 입력(n, k)  n- 붕어빵 틀의 갯수, k - 매회 k번째 붕어빵을 꺼냄  <br>
* 반환(마지막으로 남은 붕어빵의 위치)

case1)

* 함수 호출
```
exam4(6, 2) 
```

* 결과 반환
```
5
```

case2)

* 함수 호출
```
exam4(6, 3) 
```

* 결과 반환
```
1
```

case3)

* 함수 호출
```
exam4(7, 3) 
```

* 결과 반환
```
4
```

* 함수 이름: exam4<br>      (반드시 함수 이름을 exam4로 작성할것!!)
"""

#### 4번 문제 답안 작성 셀

def exam4(a,b):
    c = []
    for k in range(1, a+1):
        c.append(k)        
    
    while len(c) != 1:
        pos = b
        if b>len(c):
           pos = b - len(c)
        del c[pos-1]
        
        d=[]
        for j in range(pos-1,len(c)):
            d.append(c[j])
        for j in range(0,pos-1):
            d.append(c[j])
        c = d
    return c

exam4(7, 3)

"""## 문제5) - 20점

<strong> 정렬된 데이터가 리스트에 담겨 있다. 이 리스트에서 이진 검색으로 원하는 값을 찾고자 하는데, 몇 번만에 찾을 수 있는지를 알아보고자 한다.</strong><br>
<strong> 예를 들어, 아래의 데이터에서 4를 찾을 경우, 이진검색으로 2번의 연산횟수만에 4를 찾아 낼 수 있다.</strong><br>


![11](https://github.com/ykkim77/python_practice_final/blob/main/images/11.jpg?raw=1)



<strong> 문제 - 함수의 입력으로, 정렬된 데이터 리스트와 찾고자 하는 데이터를 차례대로 넣을 경우, 검색의 연산 횟수를 반환하는 함수를 작성하시오. (단 찾고자 하는 데이터는 반드시 리스트에 있다고 가정한다.) </strong>
* 입력(데이터가 정렬된 리스트, 찾고자 하는 데이터)    <br>
* 반환(연산 횟수)


case1)

* 함수 호출
```
exam5([3, 4, 5, 6, 7, 8, 9], 4) 
```

* 결과 반환
```
2
```

case2)

* 함수 호출
```
exam5([6, 7, 8, 9], 9) 
```

* 결과 반환
```
2
```


case3)

* 함수 호출
```
exam5([1,2,3], 2) 
```

* 결과 반환
```
1
```


* 함수 이름: exam5<br>      (반드시 함수 이름을 exam5로 작성할것!!)
"""

### 5번 문제 답안 작성 셀

def exam5(lst,key):
    start = 0
    end = len(lst) - 1
    count = 0
    
    while start <= end:
        mid = (start + end) // 2
        count +=1
        
        if lst[mid] == key:
            return count
        elif lst[mid] < key:
            start = mid + 1
        else:
            end = mid -1

exam5([3, 4, 5, 6, 7, 8, 9], 4)

"""## 문제6) - 20점

<strong> 두 문자열을 서로 같게 만들기 위해 필요한 최소 연산 횟수를 알아보고자 한다. 이때 연산은 문자열에 포함된 문자를 삽입, 삭제, 변경하면서 문자열을 서로 같게 만들어 줄 수 있다. 예를 들어, "얼마나 분석이 될까요" 라는 문장에서 "유사도나 분석 할까요"라는 문장으로 변경하기 위해서는 아래 그림과 같이 삽입, 삭제, 변경 연산을 통해 총 5회의 연산으로 서로 문장을 같게 만들어 줄 수 있다.<br> </strong>



![12](https://github.com/ykkim77/python_practice_final/blob/main/images/12.png?raw=1)



<strong> 이 연산 횟수를 구하기 위해 아래 그림과 같이, 두 문자열의 부분 문자열끼리의 최소 연산 횟수를 구해나가며, 최종 두 문자열의 최소 연산 횟수를 구하고자 한다. </strong>

![13](https://github.com/ykkim77/python_practice_final/blob/main/images/13.jpg?raw=1)


부분 문자열을 서로 같게 하기 위해 2차원 표에 두 문자열간의 최소 연산 횟수를 채워나가는 예시는 아래와 같다.

- "얼"에서 "유"라는 문자열을 서로 같게 하기 위한 최소 연산 횟수는 1, 
- "얼"에서 "유사"라는 문자열을 서로 같기 하기 위한 최소 연산 횟수는 2, 
- "얼"에서 "유사도"라는 문자열을 서로 같기 하기 위한 최소 연산 횟수는 3,
- "얼마나"에서 "유사도"라는 문자열을 서로 같기 하기 위한 최소 연산 횟수는 3
- "얼마나 분석"에서 "유사도나 분석"이라는 문자열을 로 같기 하기 위한 최소 연산 횟수는 3

이 처럼 부분문자열끼리의 최소 연산 횟수를 구해나가다 보면, 마지막 행과 열에서 전체 문자열끼리의 최소 연산 횟수를 구할 수 있다. (그림 빨간색 박스)


<strong> 문제 - 함수의 입력으로, 두개의 문자열을 차례로 넣을 경우, 두 문자열을 서로 같게 하기 위한 최소 연산 횟수를 반환하는 함수를 작성하시오.</strong>
* 입력(첫번째 문자열, 두번째 문자열)    <br>
* 반환(첫번째 문자열과 두번째 문자열이 같아지게 하기위한 최소 연산횟수)
  

case1)

* 함수 호출 
```
exam6("신촌역","신천역") 
```

* 결과 반환
```
1
```

case2)

* 함수 호출
```
exam6("서울", "부산") 
```

* 결과 반환
```
2
```


case3)

* 함수 호출
```
exam6("방망이", "솜방망이") 
```

* 결과 반환
```
1
```


* 함수 이름: exam6<br>      (반드시 함수 이름을 exam6로 작성할것!!)
"""

### 6번 문제 답안 작성 셀